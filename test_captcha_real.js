const puppeteer = require('puppeteer');
const fetch = require('node-fetch');
const fs = require('fs');

const API_KEY = process.env.TWOCAPTCHA_API_KEY;

async function solveCaptcha(imageBase64) {
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é CAPTCHA –≤ 2captcha...');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ 2captcha
  const res = await fetch(`http://2captcha.com/in.php`, {
    method: "POST",
    body: new URLSearchParams({
      key: API_KEY,
      method: "base64",
      body: imageBase64,
      json: 1,
    }),
  });
  const data = await res.json();

  if (data.status !== 1) {
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ø—á—É: " + JSON.stringify(data));
  }

  const captchaId = data.request;
  console.log(`‚è≥ CAPTCHA ID: ${captchaId}, –∂–¥–µ–º —Ä–µ—à–µ–Ω–∏—è...`);

  // –ñ–¥–µ–º —Ä–µ—à–µ–Ω–∏—è
  let attempts = 0;
  while (attempts < 24) { // 2 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
    await new Promise(r => setTimeout(r, 5000));
    attempts++;
    
    const check = await fetch(
      `http://2captcha.com/res.php?key=${API_KEY}&action=get&id=${captchaId}&json=1`
    );
    const checkData = await check.json();

    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempts}: ${checkData.request}`);

    if (checkData.status === 1) {
      console.log(`‚úÖ CAPTCHA —Ä–µ—à–µ–Ω–∞: "${checkData.request}"`);
      return checkData.request; // —Ä–µ—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    }
    if (checkData.request !== "CAPCHA_NOT_READY") {
      throw new Error("–û—à–∏–±–∫–∞ 2captcha: " + checkData.request);
    }
  }
  
  throw new Error("Timeout: CAPTCHA –Ω–µ –±—ã–ª–∞ —Ä–µ—à–µ–Ω–∞ –∑–∞ 2 –º–∏–Ω—É—Ç—ã");
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ CAPTCHA...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    args: ['--no-sandbox']
  });
  
  const page = await browser.newPage();
  await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≥–¥–µ –µ—Å—Ç—å CAPTCHA
  console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å CAPTCHA...');
  await page.goto("https://www.arbeitsagentur.de/jobsuche/jobdetail/12265-446593_JB4856617-S", {
    waitUntil: 'domcontentloaded',
    timeout: 10000
  });

  // –ü—Ä–∏–Ω–∏–º–∞–µ–º cookies
  console.log('üç™ –ò—â–µ–º –∫–Ω–æ–ø–∫—É cookies...');
  try {
    await page.waitForSelector('button', { timeout: 5000 });
    
    // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ cookies
    const cookieSelectors = [
      "button[data-testid='uc-accept-all-button']",
      "button#uc-btn-accept-banner", 
      "button:contains('Alle Cookies akzeptieren')",
      "[data-testid='uc-accept-all-button']",
      ".uc-btn-accept-banner",
      "#consentAcceptAll",
      "[id*='accept']",
      "[class*='accept-all']",
      "button[title*='akzeptieren']"
    ];
    
    let cookieBtn = null;
    for (const selector of cookieSelectors) {
      try {
        cookieBtn = await page.$(selector);
        if (cookieBtn) {
          console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ cookies: ${selector}`);
          break;
        }
      } catch (e) {}
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É "Alle Cookies akzeptieren"
    if (!cookieBtn) {
      console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Alle Cookies akzeptieren" –ø–æ —Ç–µ–∫—Å—Ç—É...');
      cookieBtn = await page.evaluateHandle(() => {
        const buttons = Array.from(document.querySelectorAll('button, div, span, a'));
        return buttons.find(btn => 
          btn.textContent && btn.textContent.trim() === 'Alle Cookies akzeptieren'
        );
      });
    }
    
    if (cookieBtn && cookieBtn.asElement) {
      console.log('üéØ –ö–ª–∏–∫–∞–µ–º "Alle Cookies akzeptieren" –ø–µ—Ä–≤—ã–π —Ä–∞–∑...');
      await cookieBtn.asElement().click();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –í–¢–û–†–û–ô –ö–õ–ò–ö! –ò—â–µ–º –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑
      console.log('üîÑ –ò—â–µ–º "Alle Cookies akzeptieren" –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∏–∫–∞...');
      const cookieBtn2 = await page.evaluateHandle(() => {
        const buttons = Array.from(document.querySelectorAll('button, div, span, a'));
        return buttons.find(btn => 
          btn.textContent && btn.textContent.trim() === 'Alle Cookies akzeptieren'
        );
      });
      
      if (cookieBtn2 && cookieBtn2.asElement) {
        console.log('üéØ –ö–ª–∏–∫–∞–µ–º "Alle Cookies akzeptieren" –í–¢–û–†–û–ô —Ä–∞–∑...');
        await cookieBtn2.asElement().click();
        console.log('‚úÖ Cookies –ø—Ä–∏–Ω—è—Ç—ã –ø–æ—Å–ª–µ –¥–≤—É—Ö –∫–ª–∏–∫–æ–≤!');
        await new Promise(resolve => setTimeout(resolve, 3000));
      } else {
        console.log('‚úÖ Cookies –ø—Ä–∏–Ω—è—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞');
      }
    } else {
      console.log('‚ö†Ô∏è Cookie –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
    }
  } catch (e) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å cookies:', e.message);
  }

  // –ö–ª–∏–∫–∞–µ–º –Ω–∞ —Å–µ–∫—Ü–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  console.log('üìß –ò—â–µ–º —Å–µ–∫—Ü–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...');
  
  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
  const contactSelectors = [
    '#jobdetails-kontaktdaten-block',
    '#jobdetails-kontaktdaten-heading',
    'h3[text*="Informationen zur Bewerbung"]',
    'h4[text*="Kontaktdaten"]',
    '.contact-section',
    '.kontakt',
    '[data-testid="contact"]'
  ];
  
  let contactSection = null;
  
  for (const selector of contactSelectors) {
    try {
      const element = await page.$(selector);
      if (element) {
        contactSection = element;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${selector}`);
        break;
      }
    } catch (e) {
      // –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
    }
  }
  
  // –¢–∞–∫–∂–µ –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
  if (!contactSection) {
    try {
      await page.evaluate(() => {
        const elements = Array.from(document.querySelectorAll('*'));
        for (const el of elements) {
          if (el.textContent && el.textContent.includes('Informationen zur Bewerbung')) {
            el.click();
            return true;
          }
        }
        return false;
      });
      console.log('‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç—É "Informationen zur Bewerbung"');
    } catch (e) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
    }
  } else {
    await contactSection.click();
    console.log('‚úÖ –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç–∞');
  }
  
  await new Promise(resolve => setTimeout(resolve, 5000)); // –ñ–¥–µ–º –¥–æ–ª—å—à–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CAPTCHA

  // –ò—â–µ–º CAPTCHA
  console.log('üîç –ò—â–µ–º CAPTCHA...');
  const captchaSelectors = [
    "img[alt='Sicherheitsabfrage']",
    "img[src*='captcha']", 
    "#kontaktdaten-captcha-image",
    "img[id*='captcha']",
    ".captcha img",
    "img[title*='captcha']",
    "img[title*='Sicherheit']",
    ".sicherheitsabfrage img",
    "[data-testid*='captcha'] img"
  ];

  let captchaElement = null;
  let usedSelector = '';

  for (const selector of captchaSelectors) {
    try {
      const elements = await page.$$(selector);
      if (elements.length > 0) {
        captchaElement = elements[0];
        usedSelector = selector;
        console.log(`üéØ –ù–∞–π–¥–µ–Ω CAPTCHA: ${selector}`);
        break;
      }
    } catch (e) {
      // –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
    }
  }

  if (!captchaElement) {
    console.log('‚ùå CAPTCHA –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    console.log('üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
    const content = await page.content();
    console.log(content.substring(0, 1000) + '...');
    await browser.close();
    return;
  }

  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ CAPTCHA –∏ –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
  console.log('üìú –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ CAPTCHA...');
  await captchaElement.scrollIntoView();
         await new Promise(resolve => setTimeout(resolve, 3000));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
  const elementInfo = await captchaElement.evaluate(el => ({
    width: el.offsetWidth,
    height: el.offsetHeight,
    src: el.src,
    complete: el.complete
  }));
  console.log('üìê –†–∞–∑–º–µ—Ä—ã CAPTCHA:', elementInfo);

  // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
  console.log('üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç CAPTCHA...');
  const captchaBuffer = await captchaElement.screenshot({ 
    type: 'png'
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  fs.writeFileSync('captcha_debug.png', captchaBuffer);
  console.log('üíæ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ captcha_debug.png');
  
  const captchaBase64 = captchaBuffer.toString("base64");
  console.log(`üìä –†–∞–∑–º–µ—Ä base64: ${captchaBase64.length} —Å–∏–º–≤–æ–ª–æ–≤`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ 2captcha
  try {
    const captchaText = await solveCaptcha(captchaBase64);
    console.log(`üéâ CAPTCHA —Ä–µ—à–µ–Ω–∞: "${captchaText}"`);

    // –í–≤–æ–¥–∏–º –≤ –ø–æ–ª–µ
    console.log('‚å®Ô∏è –í–≤–æ–∂—É —Ä–µ—à–µ–Ω–∏–µ –≤ –ø–æ–ª–µ...');
    const inputField = await page.$('#kontaktdaten-captcha-input') ||
                      await page.$('input[name*="captcha"]') ||
                      await page.$('input[placeholder*="Zeichen"]');
    
    if (inputField) {
      await inputField.clear();
      await inputField.type(captchaText, { delay: 100 });
      console.log('‚úÖ –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω');

      // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
      const submitBtn = await page.$('#kontaktdaten-captcha-absenden-button') ||
                       await page.$('button[type="submit"]') ||
                       await page.$('input[value*="Absenden"]');
      
      if (submitBtn) {
        await submitBtn.click();
        console.log('üîò –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–∞—Ç–∞');
        
        // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                 await new Promise(resolve => setTimeout(resolve, 5000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const newContent = await page.content();
        if (newContent.includes('captcha') || newContent.includes('Sicherheitsabfrage')) {
          console.log('‚ùå CAPTCHA –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        } else {
          console.log('üéâ CAPTCHA —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω–∞!');
        }
      } else {
        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } else {
      console.log('‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ CAPTCHA:', error.message);
  }

  console.log('‚è∏Ô∏è –û—Å—Ç–∞–≤–ª—è—é –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...');
  // await browser.close();
}

main().catch(console.error); 