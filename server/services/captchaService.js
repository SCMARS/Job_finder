const { Solver } = require('2captcha');
const logger = require('../utils/logger');

class CaptchaService {
  constructor() {
    this.apiKey = process.env.TWOCAPTCHA_API_KEY;
    this.solver = new Solver(this.apiKey);
    
    if (!this.apiKey) {
      logger.warn('2Captcha API key not found in environment variables');
    } else {
      logger.info('2Captcha service initialized successfully');
    }
  }

  /**
   * –†–µ—à–∞–µ—Ç –æ–±—ã—á–Ω—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–∞–ø—á—É —á–µ—Ä–µ–∑ 2Captcha
   * @param {Buffer|string} imageData - Buffer –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ base64 —Å—Ç—Ä–æ–∫–∞
   * @returns {Promise<string|null>} - –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  async solveCaptcha(imageData) {
    try {
      if (!this.apiKey) {
        logger.error('2Captcha API key not configured');
        return null;
      }

      logger.info('üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–ø—á—É –≤ 2Captcha –¥–ª—è —Ä–µ—à–µ–Ω–∏—è...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageSize = Buffer.isBuffer(imageData) ? imageData.length : imageData.length;
      logger.info(`üìä –†–∞–∑–º–µ—Ä CAPTCHA –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageSize} –±–∞–π—Ç`);

      if (imageSize === 0) {
        logger.error('‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ CAPTCHA –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä 0 –±–∞–π—Ç');
        return null;
      }
      
      let imageForSending;
      
      if (Buffer.isBuffer(imageData)) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Buffer –≤ base64
        imageForSending = imageData.toString('base64');
      } else if (typeof imageData === 'string') {
        // –£–∂–µ —Å—Ç—Ä–æ–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ base64)
        imageForSending = imageData.replace(/^data:image\/[a-z]+;base64,/, '');
      } else {
        throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ 2Captcha (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –¥–ª—è –≤–µ—Ä—Å–∏–∏ 3.0.5)
      const result = await this.solver.imageCaptcha(imageForSending, {
        numeric: 0, // 0 = –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã, 1 = —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, 2 = —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
        min_len: 5,
        max_len: 7,
        phrase: 0, // 0 = –æ–¥–Ω–æ —Å–ª–æ–≤–æ, 1 = —Ñ—Ä–∞–∑–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
        regsense: 1, // 1 = —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–µ
        calc: 0, // 0 = –æ–±—ã—á–Ω–∞—è –∫–∞–ø—á–∞, 1 = –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        lang: 'de' // —è–∑—ã–∫ –∫–∞–ø—á–∏ (–Ω–µ–º–µ—Ü–∫–∏–π)
      });

      // –†–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç { data, id } / { code }
      let solvedText = null;
      if (result && typeof result === 'string') {
        solvedText = result;
      } else if (result && typeof result === 'object') {
        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–ª—è: data (—Å—Ç—Ä–æ–∫–∞ —Ä–µ—à–µ–Ω–∏—è), code (–∏–Ω–æ–≥–¥–∞)
        solvedText = result.data || result.code || null;
      }

      if (solvedText && typeof solvedText === 'string' && solvedText.trim().length > 0) {
        const captchaText = solvedText.trim();
        logger.info(`‚úÖ 2Captcha —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–∏–ª–∞ –∫–∞–ø—á—É: "${captchaText}"`);
        return captchaText;
      } else {
        logger.error('2Captcha –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', { result });
        return null;
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑ 2Captcha:', {
        error: error.message,
        stack: error.stack
      });
      return null;
    }
  }

  /**
   * –†–µ—à–∞–µ—Ç reCaptcha v2 —á–µ—Ä–µ–∑ 2Captcha
   * @param {string} siteKey - –ö–ª—é—á —Å–∞–π—Ç–∞ –¥–ª—è reCaptcha
   * @param {string} pageUrl - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–∞–ø—á–µ–π
   * @returns {Promise<string|null>} - –¢–æ–∫–µ–Ω —Ä–µ—à–µ–Ω–∏—è –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  async solveRecaptchaV2(siteKey, pageUrl) {
    try {
      if (!this.apiKey) {
        logger.error('2Captcha API key not configured');
        return null;
      }

      logger.info('üîç –†–µ—à–∞—é reCaptcha v2 —á–µ—Ä–µ–∑ 2Captcha...', { siteKey, pageUrl });

      const result = await this.solver.recaptcha({
        googlekey: siteKey,
        pageurl: pageUrl
      });

      if (result && result.data) {
        const token = result.data;
        logger.info('‚úÖ reCaptcha v2 —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω–∞ —á–µ—Ä–µ–∑ 2Captcha');
        return token;
      } else {
        logger.error('2Captcha –Ω–µ —Å–º–æ–≥–ª–∞ —Ä–µ—à–∏—Ç—å reCaptcha v2');
        return null;
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ reCaptcha v2:', {
        error: error.message,
        stack: error.stack
      });
      return null;
    }
  }

  /**
   * –†–µ—à–∞–µ—Ç hCaptcha —á–µ—Ä–µ–∑ 2Captcha
   * @param {string} siteKey - –ö–ª—é—á —Å–∞–π—Ç–∞ –¥–ª—è hCaptcha
   * @param {string} pageUrl - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–∞–ø—á–µ–π
   * @returns {Promise<string|null>} - –¢–æ–∫–µ–Ω —Ä–µ—à–µ–Ω–∏—è –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  async solveHCaptcha(siteKey, pageUrl) {
    try {
      if (!this.apiKey) {
        logger.error('2Captcha API key not configured');
        return null;
      }

      logger.info('üîç –†–µ—à–∞—é hCaptcha —á–µ—Ä–µ–∑ 2Captcha...', { siteKey, pageUrl });

      const result = await this.solver.hcaptcha({
        sitekey: siteKey,
        pageurl: pageUrl
      });

      if (result && result.data) {
        const token = result.data;
        logger.info('‚úÖ hCaptcha —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω–∞ —á–µ—Ä–µ–∑ 2Captcha');
        return token;
      } else {
        logger.error('2Captcha –Ω–µ —Å–º–æ–≥–ª–∞ —Ä–µ—à–∏—Ç—å hCaptcha');
        return null;
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ hCaptcha:', {
        error: error.message,
        stack: error.stack
      });
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ 2Captcha
   * @returns {Promise<number|null>} - –ë–∞–ª–∞–Ω—Å –≤ USD –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  async getBalance() {
    try {
      if (!this.apiKey) {
        logger.error('2Captcha API key not configured');
        return null;
      }

      const result = await this.solver.balance();
      
      if (result && typeof result === 'number') {
        const balance = parseFloat(result);
        logger.info(`üí∞ –ë–∞–ª–∞–Ω—Å 2Captcha: $${balance}`);
        return balance;
      } else {
        logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å 2Captcha', { result });
        return null;
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ 2Captcha:', {
        error: error.message,
        stack: error.stack
      });
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å 2Captcha API
   * @returns {Promise<boolean>} - true –µ—Å–ª–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç
   */
  async testConnection() {
    try {
      const balance = await this.getBalance();
      return balance !== null;
    } catch (error) {
      logger.error('‚ùå 2Captcha API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:', error.message);
      return false;
    }
  }
}

module.exports = new CaptchaService(); 